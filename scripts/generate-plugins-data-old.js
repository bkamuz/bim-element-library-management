/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –∏–∑ MD —Ñ–∞–π–ª–æ–≤
 * –ó–∞–ø—É—Å–∫: node scripts/generate-plugins-data.js
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ frontmatter
function parseFrontmatter(content) {
  const lines = content.split('\n');
  let inFrontmatter = false;
  let frontmatterLines = [];
  let contentLines = [];
  
  for (const line of lines) {
    if (line.trim() === '---') {
      inFrontmatter = !inFrontmatter;
      continue;
    }
    
    if (inFrontmatter) {
      frontmatterLines.push(line);
    } else {
      contentLines.push(line);
    }
  }
  
  // –ü–∞—Ä—Å–∏–º frontmatter
  const metadata = {};
  for (const line of frontmatterLines) {
    if (line.includes(':')) {
      const [key, ...valueParts] = line.split(':');
      const value = valueParts.join(':').trim().replace(/"/g, '');
      metadata[key.trim()] = value;
    }
  }
  
  return { metadata, content: contentLines.join('\n') };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
function extractListItems(text) {
  return text
    .split('\n')
    .filter(line => line.trim().startsWith('- '))
    .map(line => line.trim().substring(2).trim())
    .filter(item => item.length > 0);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ MD —Ñ–∞–π–ª–∞
function processMarkdownFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const { metadata, content: markdownContent } = parseFrontmatter(content);
  
  const sections = markdownContent.split('## ');
  
  let description = '';
  let features = [];
  let additionalFeatures = [];
  
  for (const section of sections) {
    const trimmedSection = section.trim();
    
    if (trimmedSection.startsWith('–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏')) {
      const featureText = trimmedSection.replace('–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', '').trim();
      features = extractListItems(featureText);
    } else if (trimmedSection.startsWith('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏')) {
      const additionalFeatureText = trimmedSection.replace('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', '').trim();
      additionalFeatures = extractListItems(additionalFeatureText);
    }
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
  const paragraphs = markdownContent.split('\n\n');
  for (const paragraph of paragraphs) {
    const trimmed = paragraph.trim();
    if (trimmed && !trimmed.startsWith('#') && !trimmed.startsWith('- ') && !trimmed.startsWith('##')) {
      description = trimmed
        .replace(/\r\n/g, ' ')
        .replace(/\n/g, ' ')
        .replace(/\r/g, ' ')
        .replace(/\s+/g, ' ')
        .trim();
      break;
    }
  }
  
  return {
    metadata,
    description,
    features,
    additionalFeatures: additionalFeatures.length > 0 ? additionalFeatures : undefined
  };
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript —Ñ–∞–π–ª
function generateTypeScriptFile() {
  const pluginsDir = path.join(__dirname, '../src/content/plugins');
  const outputFile = path.join(__dirname, '../src/data/plugins-generated.ts');
  
  const plugins = {};
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  if (!fs.existsSync(pluginsDir)) {
    console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${pluginsDir}`);
    return;
  }
  
  // –ß–∏—Ç–∞–µ–º –≤—Å–µ MD —Ñ–∞–π–ª—ã
  const files = fs.readdirSync(pluginsDir).filter(file => file.endsWith('.md'));
  
  if (files.length === 0) {
    console.warn('‚ö†Ô∏è  MD —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ plugins');
    return;
  }
  
  for (const file of files) {
    const pluginId = path.basename(file, '.md');
    const filePath = path.join(pluginsDir, file);
    plugins[pluginId] = processMarkdownFile(filePath);
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript –∫–æ–¥
  const tsContent = `// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –§–ê–ô–õ
// –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é! –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã.
// –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ MD —Ñ–∞–π–ª—ã –≤ src/content/plugins/

export const pluginsData = ${JSON.stringify(plugins, null, 2)};
`;
  
  fs.writeFileSync(outputFile, tsContent);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const pluginsByCategory = Object.values(plugins).reduce((acc, plugin) => {
    const category = plugin.metadata.category;
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  }, {});
  
  console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: ${outputFile}`);
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   –í—Å–µ–≥–æ –ø–ª–∞–≥–∏–Ω–æ–≤: ${Object.keys(plugins).length}`);
  Object.entries(pluginsByCategory).forEach(([category, count]) => {
    console.log(`   ${category}: ${count} –ø–ª–∞–≥–∏–Ω–æ–≤`);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateTypeScriptFile();